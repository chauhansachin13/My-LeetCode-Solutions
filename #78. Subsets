import java.util.ArrayList;
import java.util.List;

class Solution {

    // Helper function to generate subsets
    public void subsetsHelper(int[] nums, int i, ArrayList<Integer> temp, List<List<Integer>> ans) {
        // Base case: if we reach the end of the array
        if (i == nums.length) {
            // Add a new list, since `temp` is mutable
            ans.add(new ArrayList<>(temp));
            return;
        }

        // Include the current element in the subset
        temp.add(nums[i]);
        subsetsHelper(nums, i + 1, temp, ans);

        // Exclude the current element and backtrack
        temp.remove(temp.size() - 1);
        subsetsHelper(nums, i + 1, temp, ans);
    }

    // Main function to return all subsets
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        subsetsHelper(nums, 0, new ArrayList<>(), ans);
        return ans;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums = { 1, 2, 3 };
        List<List<Integer>> result = solution.subsets(nums);
        System.out.println(result);
    }
}
